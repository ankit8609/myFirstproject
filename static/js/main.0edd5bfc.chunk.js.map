{"version":3,"sources":["component/Navbar.js","component/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","role","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","placeholder","backgroundColor","rows","value","onChange","event","target","NewText","toUpperCase","toLowerCase","ipText","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","defaultProps","App","setmode","_useState3","_useState4","setAlert","showAlert","message","msg","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0edd5bfc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link \" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link \" href=\"#\">Service</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" ty  pe=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode </label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes ={  title: PropTypes.string,\r\n                                        aboutText:PropTypes.string}\r\n\r\n Navbar.defaultProps = {\r\n   title: 'React Js page',\r\n   aboutText: 'About Us'\r\n };\r\n","import React , {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const[text, setText] = useState('Enter your data here');\r\n\r\n    const handleUpClick =()=>{\r\n        // console.log(\"Button was clicked\" + text);\r\n        let NewText = text.toUpperCase();   \r\n              \r\n        setText(NewText)\r\n    }\r\n    const handleOnChange =(event)=>{\r\n        // console.log(\"handle on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleDownClick =()=>{\r\n        let  NewText = text.toLowerCase();\r\n        setText(NewText)\r\n    }\r\n    const clearText =()=>{\r\n        let NewText = \" \";\r\n        setText(NewText)\r\n\r\n    }\r\n\r\n    //  how to copy code\r\n    const handleCopy =()=>{\r\n        let ipText = document.getElementById(\"mybox\");\r\n        ipText.select();\r\n        navigator.clipboard.writeText(ipText.value);\r\n    }\r\n    // const [ipText, setipText] = useState('');\r\n\r\n    // how to remove extra spaces from the whole text\r\n    const handleExtraSpaces =()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n    }\r\n  return (\r\n   <>\r\n   \r\n    <div className=\"container mt-5\">\r\n        <h1 style={{color: props.mode==='light'?'black':'white'}}>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\" style={{color: props.mode==='light'?'#00011e':'white'}}>Email address</label>\r\n                <input type=\"email\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"name@example.com\" style={{ backgroundColor: props.mode==='light'?'white':'grey' , color: props.mode==='light'?'#00011e':'white'}}/>\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\" style={{color: props.mode==='light'?'#00011e':'white'}}>Example textarea</label>\r\n                <textarea className=\"form-control\" id=\"mybox\" rows=\"5\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode==='light'?'white':'grey' ,  color: props.mode==='light'?'#00011e':'white'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-warning mx-1\" onClick={handleDownClick}>Convert to  Lowercase</button>\r\n            <button className=\"btn btn-info mx-1\" onClick={clearText}>Clear</button>\r\n            <button className=\"btn btn-danger mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>remove</button>\r\n    </div>\r\n\r\n    <div className=\"container\" style={{color: props.mode==='light'?'#00011e':'white'}}>\r\n            <h1>Your Paragraph data</h1>\r\n            <p  >This paragraph consist of {text.split(\" \").length} and {text.length} caracters</p>\r\n            <p >Time required to read this paragraph: {0.008 * text.split(\" \").length}</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Enter something to Preview\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './component/Navbar.js';\nimport Textform from './component/Textform';\nimport React, {useState} from 'react';\nimport About from './component/About';\n// import {\n//   BrowserRouter,\n//    Routes,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n    const [mode, setmode] = useState('light'); //check if the dark mode is dark or light\n    const [alert, setAlert] = useState(null);\n\n    const showAlert =(message , type)=>{\n          setAlert({\n            msg: message , \n            type: type\n          })\n    }\n\n    const toggleMode = ()=>{\n        if(mode === 'light'){\n          setmode('dark');\n          document.body.style.backgroundColor = \"#00011e\";\n          showAlert(\"Dark mode has been activated\", \"success\");\n        }else{\n          setmode('light');\n          document.body.style.backgroundColor = \"white\";\n          showAlert(\"Light mode has been activated\", \"success\");\n        }\n    }\n  return (\n  <>\n  {/* <Navbar title=\" hello world\"  aboutText = \" Me About\"/> */}\n  <Navbar mode={mode} toggleMode={toggleMode}/>\n   <Textform showAlert={showAlert} heading=\"Enter the Text\" mode={mode}/> \n\n{/* <BrowserRouter>\n<Routes>\n  <Route path='/textform'  element={<Textform showAlert={showAlert} heading=\"Enter the Text\" mode={mode}/>}/>\n </Routes>\n  <Routes>\n  <Route path='/about'  element={<About/>}/>\n </Routes>\n</BrowserRouter> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}